import { Plugin } from 'vite';
import * as yaml from 'yaml';
import { ExecOptions } from 'node:child_process';
import * as decap_cms_core from 'decap-cms-core';
import { CmsEventListener, CMS, EditorComponentOptions, Formatter, CmsFieldMarkdown, CmsField, CmsFieldMeta, CmsCollectionFile, CmsConfig, CmsLocalBackend, CmsBackend, CmsFieldStringOrText, CmsFieldBase, CmsCollection } from 'decap-cms-core';

interface CmsHookContext {
    app: CMS;
}
type CmsEventHookContext = CmsHookContext & Parameters<CmsEventListener['handler']>[0];
type CmsEditorComponentOptions = EditorComponentOptions & {
    id: string;
    label: string;
    pattern: RegExp;
    fields: DecapCmsField[];
};
interface CmsEditorFormatter {
    name: string;
    extension: string;
    formatter: Formatter;
}
type ScriptOptions = {
    [event in `on${Capitalize<CmsEventListener['name']>}`]?: (ctx: CmsEventHookContext) => Promise<void> | void;
} & {
    /**
     * Called when the admin UI is initialized.
     * This hook is run in the browser.
     * @param ctx
     */
    onInitialized?(ctx: CmsHookContext): Promise<void> | void;
    /**
     * Called when the config is written in builds.
     * This hook is run in Node.js.
     */
    onGenerated?(): Promise<void> | void;
    /**
     * Called when the config is written.
     * This hook is run in both Vite build and serve commands.
     * This hook is run in Node.js.
     */
    onConfigUpdated?(): Promise<void> | void;
    onPreSave?(ctx: CmsEventHookContext): Promise<void> | void;
    /**
     * Skip initializing until you call `CMS.init`
     *
     * ```ts
     * // Browser
     * window.CMS.init()
     * // Node.js
     * import cms from 'decap-cms-app'
     *
     * cms.init()
     * ```
     *
     * @see https://decapcms.org/docs/manual-initialization/
     * @default false
     */
    useManualInitialization?: boolean;
    /**
     * Register custom components to use in the rich text markdown editor field
     * @see https://decapcms.org/docs/custom-widgets/
     */
    markdownEditorComponents?: CmsEditorComponentOptions[];
    /**
     * Register custom file formatters.
     * @see https://decapcms.org/docs/custom-formatters/
     * @default []
     */
    formatters?: CmsEditorFormatter[];
    /**
     * Register custom styles to use in the CMS
     * Either pass the filename of the stylesheet or with `options.raw` pass the raw styles imported.
     * @see https://decapcms.org/docs/customization/
     * @default []
     */
    previewStylesheets?: (string | {
        style: string;
        options: {
            raw: true;
        };
    })[];
};

type CamelToSnakeCase<S extends string, I extends string = never> = S extends `${infer T}${infer U}` ? S extends I ? S : `${T extends Capitalize<T> ? '_' : ''}${Lowercase<T>}${CamelToSnakeCase<U>}` : S;
type KeysToSnakeCase<T> = {
    [K in keyof T as CamelToSnakeCase<string & K, 'i18n'>]: T[K] extends boolean ? T[K] : T[K] extends {} ? T[K] extends unknown[] ? KeysToSnakeCase<T[K][number]>[] : KeysToSnakeCase<T[K]> : T[K];
};
type CamelCase<S extends string> = S extends `${infer P1}_${infer P2}${infer P3}` ? `${Lowercase<P1>}${Uppercase<P2>}${CamelCase<P3>}` : Lowercase<S>;
type KeysToCamelCase<T> = {
    [K in keyof T as CamelCase<string & K>]: T[K] extends boolean ? T[K] : T[K] extends {} ? T[K] extends unknown[] ? KeysToCamelCase<T[K][number]>[] : KeysToCamelCase<T[K]> : T[K];
};
type PickRequired<O extends object, K extends keyof O> = Omit<O, K> & Required<Pick<O, K>>;

type EnvContextOption = boolean | 'dev' | 'prod';
type EnvDevContextOption = Exclude<EnvContextOption, 'prod'>;
type CollectionType = 'file' | 'folder';
type DecapCmsMarkdownFieldRenderOptions = KeysToCamelCase<Omit<CmsFieldMarkdown, 'widget' | 'default' | 'editorComponents'>>;
type DecapCmsField = KeysToCamelCase<CmsField>;
type DecapCmsFieldType = NonNullable<Exclude<CmsField, CmsFieldMeta>['widget']>;
type DecapCmsWidget = Exclude<CmsField, CmsFieldStringOrText | CmsFieldMeta> | (CmsFieldBase & PickRequired<CmsFieldStringOrText, 'widget'>);
type DecapCmsFieldWidget<Name extends DecapCmsFieldType> = DecapCmsWidget extends infer K ? K extends DecapCmsWidget ? Name extends K['widget'] ? K : never : never : never;
type DecapCmsCollectionFile = KeysToCamelCase<Omit<CmsCollectionFile, 'fields'>> & {
    fields: DecapCmsField[] | CmsField[];
};
type BaseDecapCmsCollection<Props> = KeysToCamelCase<Omit<CmsCollection, 'files' | 'fields'>> & Props;
type DecapCmsCollection<Type extends CollectionType = CollectionType> = Type extends 'folder' ? BaseDecapCmsCollection<{
    fields: DecapCmsField[] | CmsField[];
}> : Type extends 'file' ? BaseDecapCmsCollection<{
    files: DecapCmsCollectionFile[];
}> : never;
type DecapCmsConfig = KeysToCamelCase<Omit<CmsConfig, 'local_backend' | 'backend' | 'collections' | 'load_config_file'>> & {
    backend: {
        local?: EnvDevContextOption | KeysToCamelCase<CmsLocalBackend>;
        /**
         * Overwrite the branch specified in `backend.branch`
         * - true: always use current branch
         * - false: always use the branch in the configuration
         * - 'dev': only use the current branch when locally writing
         * - 'prod': ony use the current branch when building the site
         * @default false
         */
        useCurrentBranch?: EnvContextOption;
    } & KeysToCamelCase<CmsBackend>;
    collections: DecapCmsCollection[];
    /**
     * The subfolder for where to write the CMS configuration (config.yml):
     * - '' for the {@link Options.dir}
     * @default 'admin'
     */
    dir?: string;
};
type CdnLinkOptions = string | {
    version?: string;
    base?: string;
};
type HeadConfig = string | [string, Record<string, string>] | [string, Record<string, string>, string];
interface LoginPageOptions {
    /**
     * The title for the CMS pages
     * @default 'Content Manager'
     */
    title?: string;
    /**
     * The favicon for the CMS pages
     */
    icon?: string;
    /**
     * Additional head items for the page.
     * The following items are configured already:
     * - title
     * - viewport
     * - robots
     * - charset
     * - favicon (if used in the config)
     * - Netlify Identity script (if used in the config)
     * - custom config path (if used in the config)
     */
    head?: HeadConfig[];
    /**
     * Replace the login page with your own html
     */
    html?: string;
    /**
     * Instead of replacing all html, load this next to the CMS Editor for a custom footer, nav, etc.
     */
    additionalHtml?: string;
    /**
     * The version of Netlify Identity to use
     * @default '1'
     */
    netlifyIdentityVersion?: string;
}
type YmlStringifyOptions = Parameters<typeof yaml.stringify>;
interface DecapProxyOptions {
    /**
     * If using local backend AND Vite dev mode is running, control whether to run the decap-server proxy.
     * @default true
     */
    enabled?: boolean;
    /**
     * Run the proxy on a different port.
     * Does not change the local backend allowed hosts
     * @default 8081
     */
    port?: number;
    /**
     * Undocumented.
     *
     * Option for the process environment variable 'MODE'.
     * @default 'fs'
     */
    mode?: 'git' | 'fs';
    /**
     * Option for the process environment variable 'GIT_REPO_DIRECTORY'.
     *
     * The full local path to the git repo
     * @default 'process.cwd()'
     */
    gitRepoDirectory?: string;
    /**
     * Option for the process environment variable 'LOG_LEVEL'.
     *
     * @default 'info'
     */
    logLevel?: string;
    /**
     * Pass any option to use in the child process
     * @default undefined
     */
    process?: ExecOptions;
}
interface Options {
    /**
     * How to load Decap CMS
     * @default
     * { method: 'cdn', options: { version: '^3.1.11' }}
     */
    load?: {
        method: 'cdn';
        options?: CdnLinkOptions;
    };
    /**
     * Log when the configuration is being written or skipped
     */
    debug?: boolean;
    /**
     * The folder where to write all /admin/ files.
     * Will create an `admin` folder at this path if it does not exist.
     *
     * @default vite.Config.publicDir
     */
    dir?: string;
    /**
     * Options for the index.html (login page) file
     */
    login?: LoginPageOptions;
    config: DecapCmsConfig;
    /**
     * Run custom JS to enhance the CMS
     */
    script?: ScriptOptions;
    /**
     * Options for the Decap server proxy
     */
    proxy?: DecapProxyOptions;
    /**
     * Yml stringify options for writing the config.yml file
     */
    yml?: {
        replacer?: NonNullable<YmlStringifyOptions[1]>;
        options?: NonNullable<YmlStringifyOptions[2]>;
    };
}

type OverwriteOptions = Omit<CmsFieldBase, 'name'> & {
    /**
     * Hide this field in the CMS editor UI.
     * @default false
     */
    hidden?: boolean;
    /**
     * Hide this field in the CMS editor UI and do not include it in the frontmatter.
     * @default false
     */
    deleted?: boolean;
};
declare function createOverwriteableField<T extends DecapCmsFieldType>(widget: T, data: Omit<DecapCmsFieldWidget<T>, 'widget'>, overwrites?: OverwriteOptions): DecapCmsFieldWidget<T> | DecapCmsFieldWidget<'hidden'> | undefined;

type VitePressPageFrontmatterKeys = 'title' | 'titleTemplate' | 'description' | 'head' | 'body';
interface BaseVitePressFieldOptions<Keys extends string> {
    overwrites?: Partial<Record<Keys, OverwriteOptions>> & Partial<OverwriteOptions>;
}
type VitePressAdditionalField = DecapCmsField | CmsField;
interface VitePressFieldOptions extends BaseVitePressFieldOptions<VitePressPageFrontmatterKeys> {
    additionalFields?: VitePressAdditionalField[];
    /**
     * Options for the markdown editor in the CMS
     */
    markdownOptions?: DecapCmsMarkdownFieldRenderOptions;
}
type VitePressDefaultThemeFrontmatterKeys = 'layout' | 'navbar' | 'sidebar' | 'aside' | 'outline' | 'lastUpdated' | 'editLink' | 'footer' | 'pageClass';
type VitePressDefaultThemeFieldOptions = BaseVitePressFieldOptions<VitePressDefaultThemeFrontmatterKeys>;
type VitePressHomePageFrontmatterKeys = 'hero' | 'heroName' | 'heroText' | 'heroTagline' | 'heroImage' | 'heroActions' | 'heroActionTheme' | 'heroActionText' | 'heroActionLink' | 'heroActionTarget' | 'heroActionRel' | 'features' | 'featuresTitle' | 'featuresDetails' | 'featuresIcon' | 'featuresLink' | 'featuresLinkText' | 'featuresRel' | 'featuresTarget';
type VitePressHomePageFieldOptions = BaseVitePressFieldOptions<VitePressHomePageFrontmatterKeys> & Partial<Record<'additionalHeroFields' | 'additionalHeroActionFields' | 'additionalFeatureFields', VitePressAdditionalField[]>>;
declare class VitePress {
    /**
     * Create fields for:
     * - layout
     * - navbar
     * - sidebar
     * - aside
     * - outline
     * - lastUpdated
     * - editLink
     * - footer
     * - pageClass
     *
     * Does not create the default page fields, such as title and description.
     * @param options Options for overwriting field data
     * @see https://vitepress.dev/reference/frontmatter-config#default-theme-only
     */
    static createDefaultThemeNormalPageFields(options?: VitePressDefaultThemeFieldOptions): CmsField[];
    /**
     * Create fields for:
     * - title
     * - titleTemplate
     * - description
     * - head
     * - body (field for writing the markdown in the file)
     * @param options.overwrites Overwrite data, such as labels, for the fields
     * @see https://vitepress.dev/reference/frontmatter-config
     */
    static createDefaultPageFields(options?: VitePressFieldOptions): CmsField[];
    /**
     * Create fields for:
     * - layout: home (not overwriteable)
     * - hero
     * - features
     *
     * The object fields (`features`, `hero`, `heroActions`) can not be hidden and deleted.
     */
    static createHomePageFields(options?: VitePressHomePageFieldOptions): CmsField[];
    static createDefaultPageFolderCollection(name: string, folder: string, options?: VitePressFieldOptions & {
        collection?: Partial<Omit<DecapCmsCollection<'folder'>, 'name' | 'fields' | 'folder'>>;
    }): DecapCmsCollection<'folder'>;
    static createDefaultPageFile(name: string, file: string, options?: VitePressFieldOptions & {
        collection?: Partial<Omit<DecapCmsCollectionFile, 'name' | 'file'>>;
    }): DecapCmsCollectionFile;
    static createDefaultPageFileCollection(name: string, files: Parameters<typeof VitePress['createDefaultPageFile']>[], options?: {
        collection?: Partial<Omit<DecapCmsCollection<'file'>, 'name' | 'files'>>;
    }): KeysToCamelCase<Omit<decap_cms_core.CmsCollection, "fields" | "files">> & {
        files: DecapCmsCollectionFile[];
    };
}

declare function createField<T extends DecapCmsFieldType>(widget: T, data: Omit<DecapCmsFieldWidget<T>, 'widget'>): DecapCmsFieldWidget<T>;
declare function createFolderCollection(data: DecapCmsCollection<'folder'>): KeysToCamelCase<Omit<decap_cms_core.CmsCollection, "fields" | "files">> & {
    fields: DecapCmsField[] | CmsField[];
};
declare function createFile(data: DecapCmsCollectionFile): DecapCmsCollectionFile;
declare function createFileCollection(data: DecapCmsCollection<'file'>): KeysToCamelCase<Omit<decap_cms_core.CmsCollection, "fields" | "files">> & {
    files: DecapCmsCollectionFile[];
};
declare function fieldToSnakeCase(field: DecapCmsField | CmsField): CmsField;
type SharedAction<Type> = (Type extends (string | undefined) ? true : Type extends (unknown[] | undefined) ? true : false) extends true ? ({
    /**
     * The action to take when combining options from shared and collection options:
     * - append: if specified in another collection, the new options will be appended to the shared value
     * - overwrite: if specified in another collection, the new options will overwrite the share value
     * @default 'overwrite'
     */
    action?: 'append' | 'overwrite';
    value: Type;
} | Type) : Type;
type PartialIf<If extends boolean, T> = If extends true ? Partial<T> : T;
type Invert<T extends boolean> = T extends true ? false : true;
type SharedDecapCmsCollection<Type extends CollectionType> = Omit<DecapCmsCollection<Type>, 'fields' | 'files'>;
type SharedDecapCmsCollectionOptions<Type extends CollectionType> = {
    [K in keyof SharedDecapCmsCollection<Type>]: SharedAction<SharedDecapCmsCollection<Type>[K]>;
};
interface SharedOptions<Parent extends boolean = true> extends Pick<Exclude<SharedAction<string>, string>, 'action'> {
    /**
     * Changes the types on where required name fields (name, labels) must be defined:
     * on the shared or collection options.
     * @default true
     */
    requiredNameOnChildOptions?: Parent;
}
declare function createSharedCollectionOptions<Type extends CollectionType = CollectionType, Parent extends boolean = true, ChildType extends CollectionType = Type>(shared: PartialIf<Parent, SharedDecapCmsCollectionOptions<Type>>, options?: SharedOptions<Parent>): (collection: PartialIf<Invert<Parent>, SharedDecapCmsCollection<ChildType>>) => SharedDecapCmsCollection<ChildType>;

declare function getGitData(): {
    getBranch(): string | undefined;
    getCommitSha(): string | undefined;
};

declare function VitePluginDecapCMS(options: Options): Plugin;

export { type CdnLinkOptions, type CollectionType, type DecapCmsCollection, type DecapCmsCollectionFile, type DecapCmsConfig, type DecapCmsField, type DecapCmsFieldType, type DecapCmsFieldWidget, type DecapCmsMarkdownFieldRenderOptions, type DecapProxyOptions, type EnvContextOption, type EnvDevContextOption, type HeadConfig, type KeysToCamelCase, type KeysToSnakeCase, type LoginPageOptions, type Options, type OverwriteOptions, type SharedDecapCmsCollection, type SharedDecapCmsCollectionOptions, type SharedOptions, VitePress, type VitePressAdditionalField, type VitePressDefaultThemeFieldOptions, type VitePressDefaultThemeFrontmatterKeys, type VitePressFieldOptions, type VitePressHomePageFieldOptions, type VitePressHomePageFrontmatterKeys, type VitePressPageFrontmatterKeys, createField, createFile, createFileCollection, createFolderCollection, createOverwriteableField, createSharedCollectionOptions, VitePluginDecapCMS as default, fieldToSnakeCase, getGitData };
